//인텐트 후킹
/*Java.perform(function () {
   var act = Java.use("android.app.Activity");
   act.getIntent.overload().implementation = function () {
     var intent = this.getIntent()
     var cp = intent.getComponent()
     console.log("Starting " + cp.getPackageName() + "/" + cp.getClassName())
     var ext = intent.getExtras();
     if (ext) {
       var keys = ext.keySet()
       var iterator = keys.iterator()
       while (iterator.hasNext()) {
         var k = iterator.next().toString()
         var v = ext.get(k)
         console.log("\t" + v.getClass().getName())
         console.log("\t" + k + ' : ' + v.toString())
       }
     }
   return intent;
   };
})*/

//kill 변조
/*
Interceptor.attach(Module.findExportByName(null, 'kill'), {
   onEnter: function(args) {
	console.log("kill args replace");
	args[0] = ptr(0x1234);
	console.log("\x1b[32m\nBackyutrace:\n" + Thread.backtrace(this.context, Backtracer.ACCURATE).map(DebugSymbol.fromAddress).join("\n"));
   },	//벡트레스 출력
    onLeave: function(retval){
   }
});
*/

// 내장함수 확인 -> 출력되는 걸로 확인
/*
Interceptor.attach(Module.findExportByName(null, 'fopen'), {
   onEnter: function(args) {
   console.log(Memory.readCString(args[0]));
      
   },
    onLeave: function(retval){
   }

})
*/

// 문자열 제외 시키기
/*
Interceptor.attach(Module.findExportByName(null, 'exit'), {
   onEnter: function(args) {
   console.log('[*] ============= '+args[0]);
   //args[0].toInt32()

	var library_path = Memory.readCString(args[0]);
    
    if(library_path.indexOf("frida") !== -1 || library_path.indexOf("sbin") !== -1 
	|| library_path.indexOf("magisk") !== -1 || library_path.indexOf("rooting") !== -1
	|| library_path.indexOf("xbin") !== -1 || library_path.indexOf("nosu") !== -1 
	|| library_path.indexOf("RootTools") !== -1 || library_path.indexOf("su") !== -1
	|| library_path.indexOf("USB") !== -1 ) {
        //console.log("[F] Fopen library : " + library_path);
        Memory.protect(args[0], 16, 'rwx');
        Memory.writeUtf8String(args[0], "ffffff");
		console.log(library_path);
		//console.log("[S] frida bypass ");
    }
      
   },
    onLeave: function(retval){
   }

})
*/
/*
Java.perform(function () {
	var test = Java.use("viva.republica.toss.splash.SplashActivity");
	test.write.implementation = function(){
		console.log('1111111111111111111111');
		
	}
})
*/

// Java.perform(function () {
    // const StringBuilder = Java.use('java.lang.StringBuilder');
    
    // StringBuilder.toString.implementation = function () {
            // var retVal = this.toString();
			// if(retVal.indexOf("해킹") != -1){
            // console.log("StringBuilder.toString(): " + retVal);
			// }
            // return retVal;
    // };
// });


const System = Java.use('java.lang.System');
const Runtime = Java.use('java.lang.Runtime');
const SystemLoad_2 = System.loadLibrary.overload('java.lang.String');
const VMStack = Java.use('dalvik.system.VMStack');

System.loadLibrary.implementation = function(library) {
	try { 
		Runtime.getRuntime().loadLibrary0(VMStack.getCallingClassLoader(), library);
		// var base = Module.findBaseAddress("libbugsnag-ndk.sod");
		var base = Module.findBaseAddress("libbugsnag-root-detection.so");
		console.log("Base : "+base);
			Interceptor.attach(base.add(0x800), { // hooking bypass
				onEnter: function (args) {
						
				
				this.context.x2= 0x01;
				console.log("[Before  x0]" + this.context.x2);
				console.log("[After  x0]" + this.context.x0);

		}});  
	} catch(ex) {
		// console.log(ex);
	}
}; 
