완료 — 요청하신 대로 두번째 인자가 문자열 "123"일 때 "321"로 변조하는 코드를 추가한 안전한 Frida 스크립트입니다. 원본이 존재할 경우에만 savedOrig을 호출하고, 인자 변경은 Java String 객체로 교체합니다.

파일명 예: hook_replace_second_arg.js

// hook_replace_second_arg.js
Java.perform(function () {
    var className = "Test.test.test";      // 실제 클래스명으로 바꿔주세요
    var methodName = "toParamJSONString"; // 실제 메서드명으로 바꿔주세요

    try {
        var cls = Java.use(className);
        var overloads = cls[methodName].overloads;

        // Java String 레퍼런스 (대체할 때 사용)
        var JavaString = Java.use("java.lang.String");

        for (var i = 0; i < overloads.length; i++) {
            (function (idx) {
                // 원본이 함수로 존재하면 저장 (없으면 null)
                var hasOrig = overloads[idx].hasOwnProperty("implementation")
                    && typeof overloads[idx].implementation === "function";
                var savedOrig = hasOrig ? overloads[idx].implementation : null;

                overloads[idx].implementation = function () {
                    // arguments를 배열로 복사해서 조작
                    var args = Array.prototype.slice.call(arguments);

                    // 첫번째 인자 (로깅 용)
                    var firstRaw = args.length > 0 ? args[0] : undefined;
                    var firstStr;
                    try {
                        firstStr = firstRaw === null ? "null" : (firstRaw === undefined ? "undefined" : firstRaw.toString());
                    } catch (e) {
                        firstStr = "[toString() 실패: " + e + "]";
                    }

                    // 두번째 인자 검사 및 변조
                    var secondRaw = args.length > 1 ? args[1] : undefined;
                    var secondStr;
                    try {
                        secondStr = secondRaw === null ? "null" : (secondRaw === undefined ? "undefined" : secondRaw.toString());
                    } catch (e) {
                        secondStr = "[toString() 실패: " + e + "]";
                    }

                    console.log("[" + className + "." + methodName + " overload " + idx + "] 첫번째 인자:", firstStr);
                    console.log("[" + className + "." + methodName + " overload " + idx + "] 두번째 인자 (원본):", secondStr);

                    // 조건: 두번째 인자가 문자열 "123"일 때만 "321"로 교체
                    if (secondStr === "123") {
                        console.log("두번째 인자 '123' 발견 — '321'로 교체합니다.");
                        // Java String으로 안전하게 교체
                        args[1] = JavaString.$new("321");
                    }

                    // 원본 호출 (있을 때만)
                    if (savedOrig) {
                        try {
                            return savedOrig.apply(this, args);
                        } catch (e) {
                            console.log("원본 호출 실패:", e);
                            throw e;
                        }
                    } else {
                        console.log("원본 구현이 없어 호출하지 않음 (native/abstract).");
                        return null;
                    }
                };

                console.log("후킹 완료: " + methodName + " overload[" + idx + "]");
            })(i);
        }
    } catch (err) {
        console.log("스크립트 오류:", err);
    }
});

사용 방법

1. 파일로 저장 (hook_replace_second_arg.js).


2. frida -U -f <package> -l hook_replace_second_arg.js --no-pause 또는 이미 실행 중이면 frida -U -p <pid> -l hook_replace_second_arg.js.


3. 로그에서 "두번째 인자 '123' 발견 — '321'로 교체합니다." 메시지를 확인하세요.



원하면:

두번째 인자가 "123"일 때만 변경하는 대신, 첫번째 인자의 값에 따라 변경하거나 다른 타입(예: 정수 123 → 321)도 처리하도록 확장해 드립니다. 어떤 추가 동작을 원하시는지 말해 주세요.


